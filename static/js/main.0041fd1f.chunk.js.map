{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","props","this","business","name","image_url","location","category","rating","review_count","className","src","alt","address1","city","state","zip_code","React","Component","BusinessList","businesses","map","key","id","SearchBar","getSortByClass","sortByOption","sortBy","handleSortByChange","setState","handleTermChange","event","term","target","value","handleLocationChange","handleSearch","searchYelp","preventDefault","renderSortByOptions","Object","keys","sortByOptions","sortByOptionValue","onClick","bind","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0041fd1f.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\nclass Business extends React.Component {\n\n  render(props) {\n    const {name, image_url, location, category, rating, review_count} = this.props.business;\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src= {image_url} alt=''/>\n        </div>\n        <h2>{name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{location.address1}</p>\n            <p>{location.city}</p>\n            <p>{location.state + ' ' + location.zip_code}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{category}</h3>\n            <h3 className=\"rating\"> {`${rating} stars`} </h3>\n            <p>{review_count} reviews</p>\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n\n\n\nexport default Business;\n\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n\n\n  render() {\n  \n    return (\n      <div className=\"BusinessList\">\n        {\n          this.props.businesses.map(business => {\n            return <Business key={business.id} business={business} />\n          })\n        }\n      </div>\n      );\n  }\n}\n\n\nexport default BusinessList;\n\n","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass SearchBar extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      term : '',\n      location : '',\n      sortBy : 'best_match',\n    };\n\n\n    this.sortByOptions = {\n\n      'Best Match' : 'best_match',\n      'Highest Rated' : 'rating',\n      'Most Reviewed' : 'review_count'\n    \n    };\n   \n  }\n\n  getSortByClass = (sortByOption) => {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    } else {\n      return '';\n    }\n  }\n\n  handleSortByChange = (sortByOption) => {\n    this.setState({ sortBy : sortByOption });\n  }\n\n  handleTermChange = (event) => {\n    this.setState({ term : event.target.value });\n  }\n\n  handleLocationChange = (event) => {\n    this.setState({ location : event.target.value });\n  }\n\n  handleSearch = (event) => {\n    if(this.state.term === '' || this.state.location === '') {\n      \n    } else {\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    }\n    event.preventDefault();\n  }\n\n  renderSortByOptions = () => {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n\n      return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\n    });\n\n  }\n\n\n  render() {\n    \n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\n          <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch}>Search</a>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default SearchBar;","\nconst apiKey = 'tCNXli6ZIRUePChO2PHtOe_YuU5a58SimA-1V076enXcEJ_aKc3AlTl8LY_bkzZciEjp_MrymrCEhrIeYlrXaD9yjPww9769VebBz0PLYCgctJxwALxm_5aqLlThXXYx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {Authorization: `Bearer ${apiKey}`} }).then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if (jsonResponse.businesses) {\n                    return jsonResponse.businesses;\n                }\n                \n            });\n    }\n} \n\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    \n  }\n\n  searchYelp = (term, location, sortBy) => {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}